- The TTGO T-Call is an ESP32 development board that combines a SIM800L GSM/GPRS module

- TTGO T-Call SIM800L Board Specifications

Chipset: ESP32 240MHz XtensaÂ® dual-core 32-bit LX6 microprocessor
FLASH: QSPI flash 4MB / PSRAM 8MB
SRAM: 520 kB SRAM
Connectivity:
WiFi 4 802.11 b/g/n (2.4 GHz) up to 150 Mbps
Bluetooth 4.2 Classic + Bluetooth Low Energy (BLE)
2G GSM/GPRS via SIMcom SIM800L module + Nano SIM card slot
Reset Button
USB to TTL CP2104
USB-C port for power and programming
Interface: pin headers with UART, SPI, SDIO, I2C, PWM, PWM, I2S, IRGPIO, capacitor touch sensor, ADC, DAC
Power supply:
USB-C port: 5V 1A
JST header: 3.7V Lithium battery (500 mA charging current)

/* 
  Author: 	Aditya Khot
  Date: 	14/3/2023
  Version: 	1.0
  Purpose: 	This code will send an alert to the user if the load cell detects 
  a strain lower than the threshold or if the MQ sensor detects a gas leak. 
  The code will also display the strain and gas level on the LCD display. 
  The code will send the strain and gas level to Thingspeak. The code 
  will also send the strain and gas level to the user via SMS.
  
 */

// include libraries
// include wire library to communicate with the LCD display
#include <Wire.h>
// include liquid crystal library to display data on the LCD display
#include <LiquidCrystal_I2C.h>
// include HX711 library to communicate with the load cell
#include "HX711.h"

// define variables
LiquidCrystal_I2C lcd(0x27, 16, 2);

// define pinouts for load cell
#define DOUT 15
#define CLK 18

// define pinouts for MQ sensor
#define MQ 2

// define variables for load cell
// calibration factor is the ratio of the measured value at known load to the actual load in kilograms
float calibration_factor = -234560;
// zero factor is the measured value when the load cell is not under any load
float zero_factor = 8295405;
// strain threshold is the amount of strain that will trigger an alert
float strainThreshold = 5.00;

// define variables for MQ sensor
int initialMQValue = 0;
int MQValueInByte = 0;
// MQ threshold is the amount of gas that will trigger an alert
int MQThreshold = 500;

// define variables for HX711 scale
HX711 scale(DOUT, CLK);

const char simPIN[] = "";

// SMS target number (must be in international format) e.g. +00 000 000 0000
#define SMS_TARGET "+00 000 000 0000"

// Your GPRS credentials
#define TINY_GSM_MODEM_SIM800    // Modem is SIM800
#define TINY_GSM_RX_BUFFER 1024  // Set RX buffer to 1Kb

#include <TinyGsmClient.h>

// define pinouts for TTGO T-Call SIM800L module
#define MODEM_RST 5
#define MODEM_PWKEY 4
#define MODEM_POWER_ON 23
#define MODEM_TX 27
#define MODEM_RX 26
#define I2C_SDA 21
#define I2C_SCL 22

// define serial monitor and serial AT
#define SerialMon Serial
#define SerialAT Serial1

// define baud rate for serial monitor
#define BAUD_RATE 115200

// define debug mode
#ifdef DUMP_AT_COMMANDS
#include <StreamDebugger.h>
StreamDebugger debugger(SerialAT, SerialMon);
TinyGsm modem(debugger);
#else
TinyGsm modem(SerialAT);
#endif

// define TinyGsmClient
#define IP5306_ADDR 0x75
#define IP5306_REG_SYS_CTL0 0x00

// function to send data to Thingspeak
bool setPowerBoostKeepOn(int en) {
  Wire.beginTransmission(IP5306_ADDR);
  Wire.write(IP5306_REG_SYS_CTL0);

  if (en) {
    Wire.write(0x37);
  } else {
    Wire.write(0x35);
  }
  return Wire.endTransmission() == 0;
}


void setup() {
  // begin serial monitor.
  SerialMon.begin(BAUD_RATE);

  // begin lcd display and turn backlight on
  lcd.begin();
  lcd.backlight();
  lcd.home();

  // initiate scale to default and then set defined offset
  scale.set_scale();
  scale.set_offset(zero_factor);

  // initiate wire library to start I2C and communicate with LCD display
  Wire.begin(I2C_SDA, I2C_SCL);

  // start by clearing lcd display
  lcd.clear();
  
  // if the IP5306 is not ok, display an error message
  bool isOk = setPowerBoostKeepOn(1);
  lcd.print(String("IP5306: ") + (isOk ? "OK" : "FAIL"));

  // wait 1 second before running the next line of code
  delay(1000);

  // pinouts and modes defined
  pinMode(MODEM_PWKEY, OUTPUT);
  pinMode(MODEM_RST, OUTPUT);
  pinMode(MODEM_POWER_ON, OUTPUT);
  digitalWrite(MODEM_PWKEY, LOW);
  digitalWrite(MODEM_RST, HIGH);
  digitalWrite(MODEM_POWER_ON, HIGH);

  // clear lcd display
  lcd.clear();

  // print initializing message on lcd display
  lcd.print("Initializing...");

  // start TTGO T-Call SIM800L module and it's baud rate
  SerialAT.begin(BAUD_RATE, SERIAL_8N1, MODEM_RX, MODEM_TX);

  // wait 3 seconds before running the next line of code
  delay(3000);

  lcd.clear();
  lcd.print("Restarting Modem");

  // restart TTGO T-Call SIM800L module
  modem.restart();

  if (strlen(simPIN) && modem.getSimStatus() != 3) {
    modem.simUnlock(simPIN);
  }

  while (!SerialMon) { ; }

  // print initializing message on lcd display
  lcd.clear();
  lcd.print("Starting...");

  // wait 1 seconds before running the next line of code
  delay(1000);
}

void loop() {
  // adjust calibration factor
  scale.set_scale(calibration_factor);

  // run strain function
  displayStrain();

  // run strain threshold alert function
  strainThresholdAlert();

  // if there is no data in the serial buffer, run the following functions
  if (Serial.available() <= 0) {
    displayMQValue();
    alertMQSensor();
  }

  // wait 500 milli seconds before running loop again
  delay(500);
}

// This function will alert the user if the MQ sensor detects a gas leak
void alertMQSensor() {
  // check to see if the MQ sensor value is greater than or equal to the threshold
  if ((analogRead(MQ) / 4) >= MQThreshold) {

    // if the MQ sensor value is greater than or equal to the threshold, send an alert
    String smsMessage = "Gas Leak Alert";

    // send the alert using the TinyGSM library
    modem.sendSMS(SMS_TARGET, smsMessage);
  }
}
// This function will display the MQ sensor value on the LCD display
void displayMQValue() {
  // set cursor to the first row and first column
  lcd.setCursor(0, 1);
  lcd.print("MQ Value: ");

// MQ sensor value is stored in the variable MQValueInByte
  MQValueInByte = Serial.read();
  initialMQValue = analogRead(MQ) / 4;

  // if the MQ sensor value is greater than or equal to the threshold, display the value
  lcd.print(initialMQValue);
}
// This function will alert the user if the strain threshold is exceeded
void strainThresholdAlert() {

  // get data from scale
  float strain = scale.get_units();

  // check to see if strain is greater than or equal to the threshold
  float alert = strain <= strainThreshold && strain >= 1.0;

  // if strain is greater than or equal to the threshold, send an alert
  if (alert) {
    String smsMessage = "Strain Threshold Alert";
    modem.sendSMS(SMS_TARGET, smsMessage);
  }
}


// This function will display the strain value on the LCD display
void displayStrain() {
  // get data from scale
  float strain = scale.get_units();

  // set lcd display to print strain
  lcd.setCursor(0, 0);
  lcd.print("Strain: ");
  lcd.print(strain <= 0.00 ? 0 : strain);
  lcd.print(" kg");
}
